sort
  Actors    = struct Attacker | Customer ;
  ATM    	= struct Atm1 ;
  AtmComp  	= struct AtmPC | AtmNetwork ;
  Card 		= struct Card1 | Card2;

act
  Cardskimming : Actors # Actors # ATM # Card # Card;
  Cardtrapping : Actors # Actors # ATM # Card;
  Explosion,RamRaid,Blackbox,StealingMoney : Actors # ATM ;
  MalwarePC,MalwareNetwork :Actors # ATM # AtmComp;
  final;

sort 

  owningCard_tuple 		= struct o(a:Actors, c: Card);
  validCard_tuple   	= struct v(c: Card);
  is_destroyed  		= struct d(atm:ATM);
  is_controlling       	= struct c(a:Actors, atm1:ATM);
  is_stealing			= struct s(a:Actors);

  Owning    	= owningCard_tuple -> Bool;
  Valid		 	= validCard_tuple -> Bool;
  Destroyed     = is_destroyed  -> Bool;
  Controled   	= is_controlling -> Bool;
  Stealing		= is_stealing -> Bool;

map
  owningCard_tuple : Owning;
  validCard_tuple : Valid;
  is_destroyed : Destroyed;
  is_controlling : Controled;
  is_stealing :Stealing;

var aa:Actors; mm1:ATM; cc:Card; 
eqn
  owningCard_tuple(o(aa,cc)) 	= false;
  validCard_tuple(v(cc)) 		= false;
  is_destroyed(d(mm1)) 			= false;
  is_controlling(c(aa,mm1)) 	= false;
  is_stealing(s(aa))			= false;
  

proc
  X(owning : Owning, valid : Valid, destroyed : Destroyed, controled : Controled, stealing : Stealing)
=

  (stealing(s(Attacker))) -> final. X() % signal Mallory reached her goal
+
(
% Cardskimming
  sum aa:Actors, aa1:Actors, mm1:ATM, cc,cc1:Card. 
    (!stealing(s(aa1)) && aa1== Attacker && aa != aa1 && !destroyed(d(mm1)) && cc != cc1 && cc1 == Card2 && !valid(v(cc1)) && !owning(o(aa1,Card1)) )
    ->
      Cardskimming(aa,aa1,mm1,cc,cc1). X(valid = valid[v(cc1) -> true])
+

% Cardtrapping : Actors # Actors # ATM # Card;
  sum aa:Actors, aa1:Actors, mm1:ATM, cc:Card.
    (!stealing(s(aa1)) && aa != aa1 && aa1==Attacker && !destroyed(d(mm1)) && cc==Card1 && !owning(o(aa1,cc)))
    ->
      Cardtrapping(aa,aa1,mm1,cc). X(owning = owning[o(aa,cc) -> false][o(aa1,cc) -> true])

+
%  Explosion  : Actors # ATM ;
  sum aa:Actors, mm:ATM.
    (!stealing(s(aa)) && aa==Attacker && !destroyed(d(mm)) && !valid(v(Card2)) && !owning(o(aa,Card1)))
    ->
      Explosion(aa,mm). X(destroyed = destroyed[d(mm) -> true] )

+
% RamRaid  : Actors # ATM ;
  sum aa:Actors, mm:ATM.
    (!stealing(s(aa)) && aa==Attacker && !destroyed(d(mm)) && !valid(v(Card2)) && !owning(o(aa,Card1)) )
    ->
      RamRaid(aa,mm). X(destroyed = destroyed[d(mm) -> true] )
+
%MalwarePC	:Actors # ATM # AtmComp;
  sum aa:Actors, mm:ATM, atmc:AtmComp.
    (!stealing(s(aa)) && aa==Attacker && !destroyed(d(mm)) && atmc == AtmPC && !valid(v(Card2)) && !owning(o(aa,Card1)) )
    ->
      MalwarePC(aa,mm,atmc). X(controled = controled[c(aa,mm) -> true] )
+
% MalwareNetwork :Actors # ATM # AtmComp;
  sum aa:Actors, mm:ATM, atmc:AtmComp.
    (!stealing(s(aa)) && aa==Attacker && !destroyed(d(mm)) && atmc == AtmNetwork && !valid(v(Card2)) && !owning(o(aa,Card1)) )
    ->
      MalwareNetwork(aa,mm,atmc). X(controled = controled[c(aa,mm) -> true] )
+
%  Blackbox,StealingMoney   : Actors # ATM ;
  sum aa:Actors, mm:ATM.
    (!stealing(s(aa)) && aa==Attacker && !destroyed(d(mm)) && !valid(v(Card2)) && !owning(o(aa,Card1)) )
    ->
      Blackbox(aa,mm). X(controled = controled[c(aa,mm) -> true] )
+
%StealingMoney   : Actors # ATM ;
  sum aa:Actors, mm:ATM.
    (!stealing(s(aa)) && aa==Attacker &&  (destroyed(d(mm)) || controled(c(aa,mm)) || owning(o(aa,Card1)) || valid(v(Card2)) ) )
    ->
      StealingMoney(aa,mm). X(stealing = stealing[s(aa) -> true] )

)

;

init X(owningCard_tuple[o(Attacker,Card2) -> true][o(Customer,Card1) -> true], 
       validCard_tuple[v(Card1) -> true],
	   is_destroyed[d(Atm1) -> false],	
  	   is_controlling[c(Attacker,Atm1) -> false],      	
  	   is_stealing[s(Attacker) -> false]			
        );